// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InputCommand.proto

#include "InputCommand.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sr4 {
PROTOBUF_CONSTEXPR InputCommand::InputCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_inputs_)*/{}
  , /*decltype(_impl_._key_inputs_cached_byte_size_)*/{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.is_key_down_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InputCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InputCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InputCommandDefaultTypeInternal() {}
  union {
    InputCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InputCommandDefaultTypeInternal _InputCommand_default_instance_;
}  // namespace sr4
static ::_pb::Metadata file_level_metadata_InputCommand_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_InputCommand_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_InputCommand_2eproto = nullptr;

const uint32_t TableStruct_InputCommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sr4::InputCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sr4::InputCommand, _impl_.key_inputs_),
  PROTOBUF_FIELD_OFFSET(::sr4::InputCommand, _impl_.is_key_down_),
  PROTOBUF_FIELD_OFFSET(::sr4::InputCommand, _impl_.timestamp_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sr4::InputCommand)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sr4::_InputCommand_default_instance_._instance,
};

const char descriptor_table_protodef_InputCommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022InputCommand.proto\022\003sr4\"^\n\014InputComman"
  "d\022&\n\nkey_inputs\030\001 \003(\0162\022.sr4.EInputKeyTyp"
  "e\022\023\n\013is_key_down\030\002 \001(\010\022\021\n\ttimestamp\030\003 \001("
  "\003*\232\001\n\rEInputKeyType\022\020\n\014INPUT_KEY_UP\020\000\022\022\n"
  "\016INPUT_KEY_DOWN\020\001\022\022\n\016INPUT_KEY_LEFT\020\002\022\023\n"
  "\017INPUT_KEY_RIGHT\020\003\022\023\n\017INPUT_KEY_START\020\004\022"
  "\022\n\016INPUT_KEY_COIN\020\005\022\021\n\rINPUT_KEY_MAX\020\006b\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_InputCommand_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_InputCommand_2eproto = {
    false, false, 286, descriptor_table_protodef_InputCommand_2eproto,
    "InputCommand.proto",
    &descriptor_table_InputCommand_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_InputCommand_2eproto::offsets,
    file_level_metadata_InputCommand_2eproto, file_level_enum_descriptors_InputCommand_2eproto,
    file_level_service_descriptors_InputCommand_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_InputCommand_2eproto_getter() {
  return &descriptor_table_InputCommand_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_InputCommand_2eproto(&descriptor_table_InputCommand_2eproto);
namespace sr4 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EInputKeyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_InputCommand_2eproto);
  return file_level_enum_descriptors_InputCommand_2eproto[0];
}
bool EInputKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class InputCommand::_Internal {
 public:
};

InputCommand::InputCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sr4.InputCommand)
}
InputCommand::InputCommand(const InputCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InputCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_inputs_){from._impl_.key_inputs_}
    , /*decltype(_impl_._key_inputs_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.is_key_down_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_key_down_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.is_key_down_));
  // @@protoc_insertion_point(copy_constructor:sr4.InputCommand)
}

inline void InputCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_inputs_){arena}
    , /*decltype(_impl_._key_inputs_cached_byte_size_)*/{0}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.is_key_down_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InputCommand::~InputCommand() {
  // @@protoc_insertion_point(destructor:sr4.InputCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InputCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_inputs_.~RepeatedField();
}

void InputCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InputCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sr4.InputCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_inputs_.Clear();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_key_down_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.is_key_down_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InputCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sr4.EInputKeyType key_inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_key_inputs(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_key_inputs(static_cast<::sr4::EInputKeyType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool is_key_down = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_key_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InputCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sr4.InputCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sr4.EInputKeyType key_inputs = 1;
  {
    int byte_size = _impl_._key_inputs_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, _impl_.key_inputs_, byte_size, target);
    }
  }

  // bool is_key_down = 2;
  if (this->_internal_is_key_down() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_key_down(), target);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sr4.InputCommand)
  return target;
}

size_t InputCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sr4.InputCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sr4.EInputKeyType key_inputs = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_key_inputs_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_key_inputs(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._key_inputs_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // bool is_key_down = 2;
  if (this->_internal_is_key_down() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InputCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InputCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InputCommand::GetClassData() const { return &_class_data_; }


void InputCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InputCommand*>(&to_msg);
  auto& from = static_cast<const InputCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sr4.InputCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.key_inputs_.MergeFrom(from._impl_.key_inputs_);
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_is_key_down() != 0) {
    _this->_internal_set_is_key_down(from._internal_is_key_down());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InputCommand::CopyFrom(const InputCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sr4.InputCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputCommand::IsInitialized() const {
  return true;
}

void InputCommand::InternalSwap(InputCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.key_inputs_.InternalSwap(&other->_impl_.key_inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InputCommand, _impl_.is_key_down_)
      + sizeof(InputCommand::_impl_.is_key_down_)
      - PROTOBUF_FIELD_OFFSET(InputCommand, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InputCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_InputCommand_2eproto_getter, &descriptor_table_InputCommand_2eproto_once,
      file_level_metadata_InputCommand_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sr4
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sr4::InputCommand*
Arena::CreateMaybeMessage< ::sr4::InputCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sr4::InputCommand >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

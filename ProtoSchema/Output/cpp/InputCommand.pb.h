// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InputCommand.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_InputCommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_InputCommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_InputCommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_InputCommand_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_InputCommand_2eproto;
namespace sr4 {
class InputCommand;
struct InputCommandDefaultTypeInternal;
extern InputCommandDefaultTypeInternal _InputCommand_default_instance_;
}  // namespace sr4
PROTOBUF_NAMESPACE_OPEN
template<> ::sr4::InputCommand* Arena::CreateMaybeMessage<::sr4::InputCommand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sr4 {

enum EInputKeyType : int {
  INPUT_KEY_UP = 0,
  INPUT_KEY_DOWN = 1,
  INPUT_KEY_LEFT = 2,
  INPUT_KEY_RIGHT = 3,
  INPUT_KEY_START = 4,
  INPUT_KEY_COIN = 5,
  INPUT_KEY_MAX = 6,
  EInputKeyType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EInputKeyType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EInputKeyType_IsValid(int value);
constexpr EInputKeyType EInputKeyType_MIN = INPUT_KEY_UP;
constexpr EInputKeyType EInputKeyType_MAX = INPUT_KEY_MAX;
constexpr int EInputKeyType_ARRAYSIZE = EInputKeyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EInputKeyType_descriptor();
template<typename T>
inline const std::string& EInputKeyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EInputKeyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EInputKeyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EInputKeyType_descriptor(), enum_t_value);
}
inline bool EInputKeyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EInputKeyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EInputKeyType>(
    EInputKeyType_descriptor(), name, value);
}
// ===================================================================

class InputCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sr4.InputCommand) */ {
 public:
  inline InputCommand() : InputCommand(nullptr) {}
  ~InputCommand() override;
  explicit PROTOBUF_CONSTEXPR InputCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InputCommand(const InputCommand& from);
  InputCommand(InputCommand&& from) noexcept
    : InputCommand() {
    *this = ::std::move(from);
  }

  inline InputCommand& operator=(const InputCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputCommand& operator=(InputCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InputCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const InputCommand* internal_default_instance() {
    return reinterpret_cast<const InputCommand*>(
               &_InputCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputCommand& a, InputCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(InputCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InputCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InputCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InputCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InputCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InputCommand& from) {
    InputCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sr4.InputCommand";
  }
  protected:
  explicit InputCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyInputsFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kIsKeyDownFieldNumber = 2,
  };
  // repeated .sr4.EInputKeyType key_inputs = 1;
  int key_inputs_size() const;
  private:
  int _internal_key_inputs_size() const;
  public:
  void clear_key_inputs();
  private:
  ::sr4::EInputKeyType _internal_key_inputs(int index) const;
  void _internal_add_key_inputs(::sr4::EInputKeyType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_key_inputs();
  public:
  ::sr4::EInputKeyType key_inputs(int index) const;
  void set_key_inputs(int index, ::sr4::EInputKeyType value);
  void add_key_inputs(::sr4::EInputKeyType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& key_inputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_key_inputs();

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // bool is_key_down = 2;
  void clear_is_key_down();
  bool is_key_down() const;
  void set_is_key_down(bool value);
  private:
  bool _internal_is_key_down() const;
  void _internal_set_is_key_down(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sr4.InputCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> key_inputs_;
    mutable std::atomic<int> _key_inputs_cached_byte_size_;
    int64_t timestamp_;
    bool is_key_down_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_InputCommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputCommand

// repeated .sr4.EInputKeyType key_inputs = 1;
inline int InputCommand::_internal_key_inputs_size() const {
  return _impl_.key_inputs_.size();
}
inline int InputCommand::key_inputs_size() const {
  return _internal_key_inputs_size();
}
inline void InputCommand::clear_key_inputs() {
  _impl_.key_inputs_.Clear();
}
inline ::sr4::EInputKeyType InputCommand::_internal_key_inputs(int index) const {
  return static_cast< ::sr4::EInputKeyType >(_impl_.key_inputs_.Get(index));
}
inline ::sr4::EInputKeyType InputCommand::key_inputs(int index) const {
  // @@protoc_insertion_point(field_get:sr4.InputCommand.key_inputs)
  return _internal_key_inputs(index);
}
inline void InputCommand::set_key_inputs(int index, ::sr4::EInputKeyType value) {
  _impl_.key_inputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:sr4.InputCommand.key_inputs)
}
inline void InputCommand::_internal_add_key_inputs(::sr4::EInputKeyType value) {
  _impl_.key_inputs_.Add(value);
}
inline void InputCommand::add_key_inputs(::sr4::EInputKeyType value) {
  _internal_add_key_inputs(value);
  // @@protoc_insertion_point(field_add:sr4.InputCommand.key_inputs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
InputCommand::key_inputs() const {
  // @@protoc_insertion_point(field_list:sr4.InputCommand.key_inputs)
  return _impl_.key_inputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InputCommand::_internal_mutable_key_inputs() {
  return &_impl_.key_inputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
InputCommand::mutable_key_inputs() {
  // @@protoc_insertion_point(field_mutable_list:sr4.InputCommand.key_inputs)
  return _internal_mutable_key_inputs();
}

// bool is_key_down = 2;
inline void InputCommand::clear_is_key_down() {
  _impl_.is_key_down_ = false;
}
inline bool InputCommand::_internal_is_key_down() const {
  return _impl_.is_key_down_;
}
inline bool InputCommand::is_key_down() const {
  // @@protoc_insertion_point(field_get:sr4.InputCommand.is_key_down)
  return _internal_is_key_down();
}
inline void InputCommand::_internal_set_is_key_down(bool value) {
  
  _impl_.is_key_down_ = value;
}
inline void InputCommand::set_is_key_down(bool value) {
  _internal_set_is_key_down(value);
  // @@protoc_insertion_point(field_set:sr4.InputCommand.is_key_down)
}

// int64 timestamp = 3;
inline void InputCommand::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t InputCommand::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t InputCommand::timestamp() const {
  // @@protoc_insertion_point(field_get:sr4.InputCommand.timestamp)
  return _internal_timestamp();
}
inline void InputCommand::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void InputCommand::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:sr4.InputCommand.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sr4

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sr4::EInputKeyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sr4::EInputKeyType>() {
  return ::sr4::EInputKeyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_InputCommand_2eproto

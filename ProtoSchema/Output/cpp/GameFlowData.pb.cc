// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameFlowData.proto

#include "GameFlowData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sr4 {
PROTOBUF_CONSTEXPR Vector3::Vector3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DefaultTypeInternal _Vector3_default_instance_;
PROTOBUF_CONSTEXPR GameRaceData::GameRaceData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.current_pos_)*/nullptr
  , /*decltype(_impl_.target_position_)*/nullptr
  , /*decltype(_impl_.normal_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameRaceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameRaceDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameRaceDataDefaultTypeInternal() {}
  union {
    GameRaceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameRaceDataDefaultTypeInternal _GameRaceData_default_instance_;
PROTOBUF_CONSTEXPR GameFlowData::GameFlowData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.race_data_)*/nullptr
  , /*decltype(_impl_.current_flow_state_)*/0
  , /*decltype(_impl_.selected_mode_)*/0
  , /*decltype(_impl_.selected_track_)*/0
  , /*decltype(_impl_.selected_route_direction_)*/0
  , /*decltype(_impl_.selected_vehicle_)*/0
  , /*decltype(_impl_.selected_photo_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameFlowDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameFlowDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameFlowDataDefaultTypeInternal() {}
  union {
    GameFlowData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameFlowDataDefaultTypeInternal _GameFlowData_default_instance_;
}  // namespace sr4
static ::_pb::Metadata file_level_metadata_GameFlowData_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_GameFlowData_2eproto[6];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_GameFlowData_2eproto = nullptr;

const uint32_t TableStruct_GameFlowData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sr4::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sr4::Vector3, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::sr4::Vector3, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::sr4::Vector3, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sr4::GameRaceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sr4::GameRaceData, _impl_.current_pos_),
  PROTOBUF_FIELD_OFFSET(::sr4::GameRaceData, _impl_.target_position_),
  PROTOBUF_FIELD_OFFSET(::sr4::GameRaceData, _impl_.normal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sr4::GameFlowData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sr4::GameFlowData, _impl_.current_flow_state_),
  PROTOBUF_FIELD_OFFSET(::sr4::GameFlowData, _impl_.selected_mode_),
  PROTOBUF_FIELD_OFFSET(::sr4::GameFlowData, _impl_.selected_track_),
  PROTOBUF_FIELD_OFFSET(::sr4::GameFlowData, _impl_.selected_route_direction_),
  PROTOBUF_FIELD_OFFSET(::sr4::GameFlowData, _impl_.selected_vehicle_),
  PROTOBUF_FIELD_OFFSET(::sr4::GameFlowData, _impl_.selected_photo_),
  PROTOBUF_FIELD_OFFSET(::sr4::GameFlowData, _impl_.race_data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sr4::Vector3)},
  { 9, -1, -1, sizeof(::sr4::GameRaceData)},
  { 18, -1, -1, sizeof(::sr4::GameFlowData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sr4::_Vector3_default_instance_._instance,
  &::sr4::_GameRaceData_default_instance_._instance,
  &::sr4::_GameFlowData_default_instance_._instance,
};

const char descriptor_table_protodef_GameFlowData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022GameFlowData.proto\022\003sr4\"*\n\007Vector3\022\t\n\001"
  "x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"v\n\014GameRac"
  "eData\022!\n\013current_pos\030\001 \001(\0132\014.sr4.Vector3"
  "\022%\n\017target_position\030\002 \001(\0132\014.sr4.Vector3\022"
  "\034\n\006normal\030\003 \001(\0132\014.sr4.Vector3\"\277\002\n\014GameFl"
  "owData\022/\n\022current_flow_state\030\001 \001(\0162\023.sr4"
  ".EGameFlowState\022%\n\rselected_mode\030\002 \001(\0162\016"
  ".sr4.EGameMode\022#\n\016selected_track\030\003 \001(\0162\013"
  ".sr4.ETrack\0226\n\030selected_route_direction\030"
  "\004 \001(\0162\024.sr4.ERouteDirection\022+\n\020selected_"
  "vehicle\030\005 \001(\0162\021.sr4.EVehicleType\022\'\n\016sele"
  "cted_photo\030\006 \001(\0162\017.sr4.EPhotoType\022$\n\trac"
  "e_data\030\007 \001(\0132\021.sr4.GameRaceData*\327\010\n\016EGam"
  "eFlowState\022\027\n\023GAME_FLOW_COPYRIGHT\020\000\022\025\n\021G"
  "AME_FLOW_WARNING\020\001\022\022\n\016GAME_FLOW_LOGO\020\002\022\020"
  "\n\014GAME_FLOW_PV\020\003\022\027\n\023GAME_FLOW_COIN_PAGE\020"
  "\004\022\031\n\025GAME_FLOW_SELECT_BIKE\020\005\022\032\n\026GAME_FLO"
  "W_SELECT_SCENE\020\006\022\022\n\016GAME_FLOW_RACE\020\007\022\026\n\022"
  "GAME_FLOW_RACE_END\020\010\022\027\n\023GAME_FLOW_GAME_O"
  "VER\020\t\022\025\n\021GAME_FLOW_RANKING\020\n\022\027\n\023GAME_FLO"
  "W_PROMOTION\020\013\022\033\n\027GAME_FLOW_ACCOUNT_ENTRY"
  "\020\014\022\030\n\024GAME_FLOW_PHOTO_AUTH\020\r\022\031\n\025GAME_FLO"
  "W_SELECT_MODE\020\016\022\033\n\027GAME_FLOW_PAY_FOR_LEV"
  "EL\020\017\022\027\n\023GAME_FLOW_RIDE_SHOW\020\020\022\027\n\023GAME_FL"
  "OW_LOAD_FLOW\020\021\022\027\n\023GAME_FLOW_LOAD_GAME\020\022\022"
  "\026\n\022GAME_FLOW_CUTSCENE\020\023\022\033\n\027GAME_FLOW_MAP"
  "_BEAT_SHOW\020\024\022\027\n\023GAME_FLOW_SIGN_NAME\020\025\022\026\n"
  "\022GAME_FLOW_CONTINUE\020\026\022\035\n\031GAME_FLOW_HARDW"
  "ARE_DETECT\020\027\022\033\n\027GAME_FLOW_LOAD_CONTINUE\020"
  "\030\022\032\n\026GAME_FLOW_LOAD_STANDBY\020\031\022\036\n\032GAME_FL"
  "OW_OPERATOR_SETTING\020\032\022\036\n\032GAME_FLOW_AIRSP"
  "RING_ADJUST\020\033\022!\n\035GAME_FLOW_PLAYER_REGIST"
  "RATION\020\034\022#\n\037GAME_FLOW_WARNING_FOR_SELECT"
  "ION\020\035\022\030\n\024GAME_FLOW_BATTLE_MAP\020\036\022\026\n\022GAME_"
  "FLOW_M23_READ\020\037\022\036\n\032GAME_FLOW_RACE_FINISH"
  "_SHOW\020 \022\031\n\025GAME_FLOW_PLAYER_INFO\020!\022\035\n\031GA"
  "ME_FLOW_LOCAL_BEAT_SHOW\020\"\022\030\n\024GAME_FLOW_A"
  "GENT_LOGO\020#\022\025\n\021GAME_FLOW_UE_LOGO\020$\022\032\n\026GA"
  "ME_FLOW_CRIWARE_LOGO\020%\022\036\n\032GAME_FLOW_STAT"
  "IC_COIN_PAGE\020&\022\036\n\032GAME_FLOW_LOAD_RACE_RE"
  "SULT\020\'\022\021\n\rGAME_FLOW_MAX\020(*D\n\tEGameMode\022\032"
  "\n\026GAME_MODE_LOCAL_VERSUS\020\000\022\033\n\027GAME_MODE_"
  "GLOBAL_VERSUS\020\001*\206\002\n\006ETrack\022\016\n\nTRACK_NONE"
  "\020\000\022\023\n\017TRACK_LAS_VEGAS\020\001\022\021\n\rTRACK_BEIJING"
  "\020\002\022\017\n\013TRACK_SEOUL\020\003\022\022\n\016TRACK_SHANGHAI\020\004\022"
  "\022\n\016TRACK_THAILAND\020\005\022\023\n\017TRACK_CHONGQING\020\006"
  "\022\026\n\022TRACK_PHYSICS_TEST\020\007\022\030\n\024TRACK_PHYSIC"
  "S_TEST_2\020\010\022\032\n\026TRACK_DELIA_HUANG_TEST\020\t\022\031"
  "\n\025TRACK_SHOU_WEIKU_TEST\020\n\022\r\n\tTRACK_MAX\020\013"
  "*p\n\017ERouteDirection\022\035\n\031ROUTE_DIRECTION_C"
  "LOCKWISE\020\000\022%\n!ROUTE_DIRECTION_COUNTER_CL"
  "OCKWISE\020\001\022\027\n\023ROUTE_DIRECTION_MAX\020\002*\247\001\n\014E"
  "VehicleType\022\017\n\013VEHICLE_MSQ\020\000\022\017\n\013VEHICLE_"
  "MAA\020\001\022\017\n\013VEHICLE_MUR\020\002\022\017\n\013VEHICLE_MHA\020\003\022"
  "\017\n\013VEHICLE_MRA\020\004\022\017\n\013VEHICLE_MAD\020\005\022\017\n\013VEH"
  "ICLE_MCE\020\006\022\017\n\013VEHICLE_MQB\020\007\022\017\n\013VEHICLE_M"
  "AX\020\010*\227\002\n\nEPhotoType\022\020\n\014PHOTO_HELMET\020\000\022\016\n"
  "\nPHOTO_VEIL\020\001\022\030\n\024PHOTO_DIVING_GOGGLES\020\002\022"
  "\023\n\017PHOTO_FACE_MASK\020\003\022\024\n\020PHOTO_COMIC_MASK"
  "\020\004\022\021\n\rPHOTO_SEA_ELF\020\005\022\027\n\023PHOTO_KNIGHT_HE"
  "LMET\020\006\022\024\n\020PHOTO_EMOJI_MASK\020\007\022\027\n\023PHOTO_DO"
  "LL_HEADGEAR\020\010\022\036\n\032PHOTO_SICHUAN_OPERA_MAK"
  "EUP\020\t\022\021\n\rPHOTO_ORIGAMI\020\n\022\024\n\020PHOTO_LION_D"
  "ANCE\020\013b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_GameFlowData_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_GameFlowData_2eproto = {
    false, false, 2534, descriptor_table_protodef_GameFlowData_2eproto,
    "GameFlowData.proto",
    &descriptor_table_GameFlowData_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_GameFlowData_2eproto::offsets,
    file_level_metadata_GameFlowData_2eproto, file_level_enum_descriptors_GameFlowData_2eproto,
    file_level_service_descriptors_GameFlowData_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_GameFlowData_2eproto_getter() {
  return &descriptor_table_GameFlowData_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_GameFlowData_2eproto(&descriptor_table_GameFlowData_2eproto);
namespace sr4 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameFlowState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameFlowData_2eproto);
  return file_level_enum_descriptors_GameFlowData_2eproto[0];
}
bool EGameFlowState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameFlowData_2eproto);
  return file_level_enum_descriptors_GameFlowData_2eproto[1];
}
bool EGameMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETrack_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameFlowData_2eproto);
  return file_level_enum_descriptors_GameFlowData_2eproto[2];
}
bool ETrack_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERouteDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameFlowData_2eproto);
  return file_level_enum_descriptors_GameFlowData_2eproto[3];
}
bool ERouteDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EVehicleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameFlowData_2eproto);
  return file_level_enum_descriptors_GameFlowData_2eproto[4];
}
bool EVehicleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPhotoType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_GameFlowData_2eproto);
  return file_level_enum_descriptors_GameFlowData_2eproto[5];
}
bool EPhotoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sr4.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:sr4.Vector3)
}

inline void Vector3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:sr4.Vector3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:sr4.Vector3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sr4.Vector3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sr4.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sr4.Vector3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3::GetClassData() const { return &_class_data_; }


void Vector3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3*>(&to_msg);
  auto& from = static_cast<const Vector3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sr4.Vector3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sr4.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)
      + sizeof(Vector3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GameFlowData_2eproto_getter, &descriptor_table_GameFlowData_2eproto_once,
      file_level_metadata_GameFlowData_2eproto[0]);
}

// ===================================================================

class GameRaceData::_Internal {
 public:
  static const ::sr4::Vector3& current_pos(const GameRaceData* msg);
  static const ::sr4::Vector3& target_position(const GameRaceData* msg);
  static const ::sr4::Vector3& normal(const GameRaceData* msg);
};

const ::sr4::Vector3&
GameRaceData::_Internal::current_pos(const GameRaceData* msg) {
  return *msg->_impl_.current_pos_;
}
const ::sr4::Vector3&
GameRaceData::_Internal::target_position(const GameRaceData* msg) {
  return *msg->_impl_.target_position_;
}
const ::sr4::Vector3&
GameRaceData::_Internal::normal(const GameRaceData* msg) {
  return *msg->_impl_.normal_;
}
GameRaceData::GameRaceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sr4.GameRaceData)
}
GameRaceData::GameRaceData(const GameRaceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameRaceData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.current_pos_){nullptr}
    , decltype(_impl_.target_position_){nullptr}
    , decltype(_impl_.normal_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_pos()) {
    _this->_impl_.current_pos_ = new ::sr4::Vector3(*from._impl_.current_pos_);
  }
  if (from._internal_has_target_position()) {
    _this->_impl_.target_position_ = new ::sr4::Vector3(*from._impl_.target_position_);
  }
  if (from._internal_has_normal()) {
    _this->_impl_.normal_ = new ::sr4::Vector3(*from._impl_.normal_);
  }
  // @@protoc_insertion_point(copy_constructor:sr4.GameRaceData)
}

inline void GameRaceData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.current_pos_){nullptr}
    , decltype(_impl_.target_position_){nullptr}
    , decltype(_impl_.normal_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameRaceData::~GameRaceData() {
  // @@protoc_insertion_point(destructor:sr4.GameRaceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameRaceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.current_pos_;
  if (this != internal_default_instance()) delete _impl_.target_position_;
  if (this != internal_default_instance()) delete _impl_.normal_;
}

void GameRaceData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameRaceData::Clear() {
// @@protoc_insertion_point(message_clear_start:sr4.GameRaceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.current_pos_ != nullptr) {
    delete _impl_.current_pos_;
  }
  _impl_.current_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.target_position_ != nullptr) {
    delete _impl_.target_position_;
  }
  _impl_.target_position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.normal_ != nullptr) {
    delete _impl_.normal_;
  }
  _impl_.normal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameRaceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sr4.Vector3 current_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sr4.Vector3 target_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sr4.Vector3 normal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameRaceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sr4.GameRaceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sr4.Vector3 current_pos = 1;
  if (this->_internal_has_current_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::current_pos(this),
        _Internal::current_pos(this).GetCachedSize(), target, stream);
  }

  // .sr4.Vector3 target_position = 2;
  if (this->_internal_has_target_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::target_position(this),
        _Internal::target_position(this).GetCachedSize(), target, stream);
  }

  // .sr4.Vector3 normal = 3;
  if (this->_internal_has_normal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::normal(this),
        _Internal::normal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sr4.GameRaceData)
  return target;
}

size_t GameRaceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sr4.GameRaceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sr4.Vector3 current_pos = 1;
  if (this->_internal_has_current_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_pos_);
  }

  // .sr4.Vector3 target_position = 2;
  if (this->_internal_has_target_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_position_);
  }

  // .sr4.Vector3 normal = 3;
  if (this->_internal_has_normal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.normal_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameRaceData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameRaceData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameRaceData::GetClassData() const { return &_class_data_; }


void GameRaceData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameRaceData*>(&to_msg);
  auto& from = static_cast<const GameRaceData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sr4.GameRaceData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_current_pos()) {
    _this->_internal_mutable_current_pos()->::sr4::Vector3::MergeFrom(
        from._internal_current_pos());
  }
  if (from._internal_has_target_position()) {
    _this->_internal_mutable_target_position()->::sr4::Vector3::MergeFrom(
        from._internal_target_position());
  }
  if (from._internal_has_normal()) {
    _this->_internal_mutable_normal()->::sr4::Vector3::MergeFrom(
        from._internal_normal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameRaceData::CopyFrom(const GameRaceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sr4.GameRaceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRaceData::IsInitialized() const {
  return true;
}

void GameRaceData::InternalSwap(GameRaceData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameRaceData, _impl_.normal_)
      + sizeof(GameRaceData::_impl_.normal_)
      - PROTOBUF_FIELD_OFFSET(GameRaceData, _impl_.current_pos_)>(
          reinterpret_cast<char*>(&_impl_.current_pos_),
          reinterpret_cast<char*>(&other->_impl_.current_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameRaceData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GameFlowData_2eproto_getter, &descriptor_table_GameFlowData_2eproto_once,
      file_level_metadata_GameFlowData_2eproto[1]);
}

// ===================================================================

class GameFlowData::_Internal {
 public:
  static const ::sr4::GameRaceData& race_data(const GameFlowData* msg);
};

const ::sr4::GameRaceData&
GameFlowData::_Internal::race_data(const GameFlowData* msg) {
  return *msg->_impl_.race_data_;
}
GameFlowData::GameFlowData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sr4.GameFlowData)
}
GameFlowData::GameFlowData(const GameFlowData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameFlowData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.race_data_){nullptr}
    , decltype(_impl_.current_flow_state_){}
    , decltype(_impl_.selected_mode_){}
    , decltype(_impl_.selected_track_){}
    , decltype(_impl_.selected_route_direction_){}
    , decltype(_impl_.selected_vehicle_){}
    , decltype(_impl_.selected_photo_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_race_data()) {
    _this->_impl_.race_data_ = new ::sr4::GameRaceData(*from._impl_.race_data_);
  }
  ::memcpy(&_impl_.current_flow_state_, &from._impl_.current_flow_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.selected_photo_) -
    reinterpret_cast<char*>(&_impl_.current_flow_state_)) + sizeof(_impl_.selected_photo_));
  // @@protoc_insertion_point(copy_constructor:sr4.GameFlowData)
}

inline void GameFlowData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.race_data_){nullptr}
    , decltype(_impl_.current_flow_state_){0}
    , decltype(_impl_.selected_mode_){0}
    , decltype(_impl_.selected_track_){0}
    , decltype(_impl_.selected_route_direction_){0}
    , decltype(_impl_.selected_vehicle_){0}
    , decltype(_impl_.selected_photo_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameFlowData::~GameFlowData() {
  // @@protoc_insertion_point(destructor:sr4.GameFlowData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameFlowData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.race_data_;
}

void GameFlowData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameFlowData::Clear() {
// @@protoc_insertion_point(message_clear_start:sr4.GameFlowData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.race_data_ != nullptr) {
    delete _impl_.race_data_;
  }
  _impl_.race_data_ = nullptr;
  ::memset(&_impl_.current_flow_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.selected_photo_) -
      reinterpret_cast<char*>(&_impl_.current_flow_state_)) + sizeof(_impl_.selected_photo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameFlowData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sr4.EGameFlowState current_flow_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_current_flow_state(static_cast<::sr4::EGameFlowState>(val));
        } else
          goto handle_unusual;
        continue;
      // .sr4.EGameMode selected_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_selected_mode(static_cast<::sr4::EGameMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .sr4.ETrack selected_track = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_selected_track(static_cast<::sr4::ETrack>(val));
        } else
          goto handle_unusual;
        continue;
      // .sr4.ERouteDirection selected_route_direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_selected_route_direction(static_cast<::sr4::ERouteDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // .sr4.EVehicleType selected_vehicle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_selected_vehicle(static_cast<::sr4::EVehicleType>(val));
        } else
          goto handle_unusual;
        continue;
      // .sr4.EPhotoType selected_photo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_selected_photo(static_cast<::sr4::EPhotoType>(val));
        } else
          goto handle_unusual;
        continue;
      // .sr4.GameRaceData race_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_race_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameFlowData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sr4.GameFlowData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sr4.EGameFlowState current_flow_state = 1;
  if (this->_internal_current_flow_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_current_flow_state(), target);
  }

  // .sr4.EGameMode selected_mode = 2;
  if (this->_internal_selected_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_selected_mode(), target);
  }

  // .sr4.ETrack selected_track = 3;
  if (this->_internal_selected_track() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_selected_track(), target);
  }

  // .sr4.ERouteDirection selected_route_direction = 4;
  if (this->_internal_selected_route_direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_selected_route_direction(), target);
  }

  // .sr4.EVehicleType selected_vehicle = 5;
  if (this->_internal_selected_vehicle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_selected_vehicle(), target);
  }

  // .sr4.EPhotoType selected_photo = 6;
  if (this->_internal_selected_photo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_selected_photo(), target);
  }

  // .sr4.GameRaceData race_data = 7;
  if (this->_internal_has_race_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::race_data(this),
        _Internal::race_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sr4.GameFlowData)
  return target;
}

size_t GameFlowData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sr4.GameFlowData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sr4.GameRaceData race_data = 7;
  if (this->_internal_has_race_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.race_data_);
  }

  // .sr4.EGameFlowState current_flow_state = 1;
  if (this->_internal_current_flow_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_current_flow_state());
  }

  // .sr4.EGameMode selected_mode = 2;
  if (this->_internal_selected_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_selected_mode());
  }

  // .sr4.ETrack selected_track = 3;
  if (this->_internal_selected_track() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_selected_track());
  }

  // .sr4.ERouteDirection selected_route_direction = 4;
  if (this->_internal_selected_route_direction() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_selected_route_direction());
  }

  // .sr4.EVehicleType selected_vehicle = 5;
  if (this->_internal_selected_vehicle() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_selected_vehicle());
  }

  // .sr4.EPhotoType selected_photo = 6;
  if (this->_internal_selected_photo() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_selected_photo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameFlowData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameFlowData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameFlowData::GetClassData() const { return &_class_data_; }


void GameFlowData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameFlowData*>(&to_msg);
  auto& from = static_cast<const GameFlowData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sr4.GameFlowData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_race_data()) {
    _this->_internal_mutable_race_data()->::sr4::GameRaceData::MergeFrom(
        from._internal_race_data());
  }
  if (from._internal_current_flow_state() != 0) {
    _this->_internal_set_current_flow_state(from._internal_current_flow_state());
  }
  if (from._internal_selected_mode() != 0) {
    _this->_internal_set_selected_mode(from._internal_selected_mode());
  }
  if (from._internal_selected_track() != 0) {
    _this->_internal_set_selected_track(from._internal_selected_track());
  }
  if (from._internal_selected_route_direction() != 0) {
    _this->_internal_set_selected_route_direction(from._internal_selected_route_direction());
  }
  if (from._internal_selected_vehicle() != 0) {
    _this->_internal_set_selected_vehicle(from._internal_selected_vehicle());
  }
  if (from._internal_selected_photo() != 0) {
    _this->_internal_set_selected_photo(from._internal_selected_photo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameFlowData::CopyFrom(const GameFlowData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sr4.GameFlowData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameFlowData::IsInitialized() const {
  return true;
}

void GameFlowData::InternalSwap(GameFlowData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameFlowData, _impl_.selected_photo_)
      + sizeof(GameFlowData::_impl_.selected_photo_)
      - PROTOBUF_FIELD_OFFSET(GameFlowData, _impl_.race_data_)>(
          reinterpret_cast<char*>(&_impl_.race_data_),
          reinterpret_cast<char*>(&other->_impl_.race_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameFlowData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GameFlowData_2eproto_getter, &descriptor_table_GameFlowData_2eproto_once,
      file_level_metadata_GameFlowData_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sr4
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sr4::Vector3*
Arena::CreateMaybeMessage< ::sr4::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sr4::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::sr4::GameRaceData*
Arena::CreateMaybeMessage< ::sr4::GameRaceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sr4::GameRaceData >(arena);
}
template<> PROTOBUF_NOINLINE ::sr4::GameFlowData*
Arena::CreateMaybeMessage< ::sr4::GameFlowData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sr4::GameFlowData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
